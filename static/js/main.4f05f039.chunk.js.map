{"version":3,"sources":["reducers/favorites.js","reducers/search.js","reducers/degree.js","utils/colors.js","utils/calc.js","utils/ui.js","reducers/date.js","reducers/index.js","components/Background.js","components/Navbar.js","components/SearchBar.js","components/WeatherCard.js","utils/icons.js","api/weather.js","api/geocode.js","api/index.js","containers/Search.js","containers/Favorites.js","global/GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["removeFromFavorites","data","type","isFavoriteEqual","fav1","fav2","lat","lon","filteredState","state","filter","favorite","isAlreadyAdded","isEmpty","length","updateLocalStorage","localStorage","setItem","JSON","stringify","showAlreadyAddedMessage","alert","city","deleteConfirmed","window","confirm","initialState","setKeyword","keyword","getWeatherColor","tempInCelsius","bg","text","roundTemp","temp","parseFloat","toFixed","formatTwoDigitNumber","num","animations","fadeIn","keyframes","fadeOut","bounceIn","bounceOut","today","Date","curTimezoneOffset","getTimezoneOffset","getTime","getCurUTCDate","combineReducers","favorites","action","newState","isFavorite","map","search","degree","date","styled","props","className","image","Logo","h2","useSelector","dispatch","useDispatch","onClick","e","target","dataset","data-degree","SearchInput","input","Suggestions","ul","getSuggestions","suggestions","onSuggestionClick","searchInput","useRef","onSubmit","preventDefault","placeholder","onChange","value","ref","suggestion","index","key","id","data-index","place_name","Title","div","timezoneOffset","code","weather","onFavoriteClick","timezone_offset","temp_min","temp_max","description","icon","timeString","hr","getHours","mn","getMinutes","pr","getTimeString","getDegree","convertTemp","data-lat","data-lon","getWeather","config","params","axios","get","getPlaces","url","require","useState","setSuggestions","weatherData","setWeatherData","loading","setLoading","a","res","places","features","place","push","console","log","onGetWeather","coordinates","onSetWeatherData","split","current","daily","min","max","useEffect","document","addEventListener","classList","contains","geometry","innerText","size","color","onDelete","interval","setInterval","clearInterval","GlobalStyle","createGlobalStyle","App","Boolean","location","hostname","match","store","createStore","reducers","getItem","parse","initState","composeWithDevTools","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f05f039.chunk.js","sourcesContent":["import isEmpty from \"is-empty\";\nexport const ADD_TO_FAVORITES = \"FAVORITES/ADD_TO_FAVORITES\";\nexport const REMOVE_FROM_FAVORITES = \"FAVORITES/REMOVE_FROM_FAVORITES\";\nexport const UPDATE_FAVORITE = \"FAVORITES/UPDATE_FAVORITE\";\n\nexport const addToFavorites = data => ({\n  type: ADD_TO_FAVORITES,\n  data,\n});\n\nexport const removeFromFavorites = data => ({\n  type: REMOVE_FROM_FAVORITES,\n  data,\n});\n\nexport const updateFavorite = data => ({\n  type: UPDATE_FAVORITE,\n  data,\n});\n\nconst isFavoriteEqual = (fav1, fav2) =>\n  fav1.lat === fav2.lat && fav1.lon === fav2.lon;\n\nconst filteredState = (state, data) =>\n  state.filter(favorite => !isFavoriteEqual(favorite, data));\n\nconst isAlreadyAdded = (state, data) => {\n  if (isEmpty(state)) return false;\n  return filteredState(state, data).length !== state.length;\n};\nconst updateLocalStorage = state =>\n  localStorage.setItem(\"weather-or-not/favorites\", JSON.stringify(state));\n\nconst showAlreadyAddedMessage = data =>\n  alert(`${data.city} is already added to Favorites.`);\n\nconst deleteConfirmed = data => {\n  return window.confirm(\n    `Are you sure you want to delete ${data.city} from Favorites?`\n  );\n};\n\nconst initialState = [];\n\nexport default function favorites(state = initialState, action) {\n  let newState = state;\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      if (isAlreadyAdded(state, action.data)) {\n        showAlreadyAddedMessage(action.data);\n        return state;\n      }\n      newState = [...state, { ...action.data, isFavorite: true }];\n      updateLocalStorage(newState);\n      return newState;\n    case REMOVE_FROM_FAVORITES:\n      if (deleteConfirmed(action.data)) {\n        newState = filteredState(state, action.data);\n        updateLocalStorage(newState);\n      }\n      return newState;\n    case UPDATE_FAVORITE:\n      if (isAlreadyAdded(state, action.data)) {\n        newState = state.map(favorite =>\n          isFavoriteEqual(favorite, action.data) ? action.data : favorite\n        );\n        updateLocalStorage(newState);\n      }\n      return newState;\n    default:\n      return state;\n  }\n}\n","export const SET_KEYWORD = \"FAVORITES/SET_KEYWORD\";\n\nexport const setKeyword = keyword => ({\n  type: SET_KEYWORD,\n  keyword,\n});\n\nconst initialState = \"\";\n\nexport default function search(state = initialState, action) {\n  switch (action.type) {\n    case SET_KEYWORD:\n      return action.keyword;\n    default:\n      return state;\n  }\n}\n","export const TOGGLE_DEGREE = \"DEGREE/TOGGLE_DEGREE\";\n\nexport const toggleDegree = () => ({\n  type: TOGGLE_DEGREE,\n});\n\nexport const CELSIUS = \"celsius\";\nexport const FAHRENHEIT = \"fahrenheit\";\n\nconst updateLocalStorage = state =>\n  localStorage.setItem(\"weather-or-not/degree\", state);\n\nconst initialState = CELSIUS;\n\nexport default function degree(state = initialState, action) {\n  let newState = state;\n  switch (action.type) {\n    case TOGGLE_DEGREE:\n      newState = state === CELSIUS ? FAHRENHEIT : CELSIUS;\n      updateLocalStorage(newState);\n      return newState;\n    default:\n      return state;\n  }\n}\n","const white = \"#ffffff\";\nconst silver = \"#808080\";\n\nconst freezing = \"#000000\";\nconst cold = \"#d1dfe6\";\nconst chilly = \"#b2eddb\";\nconst good = \"#e6f7b0\";\nconst warm = \"#fcec6f\";\nconst hot = \"#ffc175\";\nconst burning = \"#fca474\";\n\nexport const getWeatherColor = tempInCelsius => {\n  let bg,\n    text = \"\";\n  if (tempInCelsius <= -5) {\n    bg = freezing;\n    text = \"#000000\";\n  } else if (tempInCelsius <= 5) {\n    bg = cold;\n    text = silver;\n  } else if (tempInCelsius <= 20) {\n    bg = chilly;\n    text = silver;\n  } else if (tempInCelsius <= 26) {\n    bg = good;\n    text = silver;\n  } else if (tempInCelsius <= 32) {\n    bg = warm;\n    text = silver;\n  } else if (tempInCelsius <= 36) {\n    bg = hot;\n    text = silver;\n  } else {\n    bg = burning;\n    text = white;\n  }\n  return {\n    bg,\n    text,\n  };\n};\n","import { FAHRENHEIT } from \"../reducers\";\nexport const roundTemp = temp => parseFloat(temp).toFixed(1);\nexport const convertTemp = (degree, tempInCelsius) =>\n  roundTemp(degree === FAHRENHEIT ? tempInCelsius * 1.8 + 32 : tempInCelsius);\nexport const getCurUTCDate = () => {\n  const today = new Date();\n  const curTimezoneOffset = today.getTimezoneOffset() * 60;\n  return new Date(today.getTime() + curTimezoneOffset * 1000);\n};\nexport const getUTCDateWithOffset = (UTCDate, timezoneOffset) => {\n  return new Date(UTCDate.getTime() + timezoneOffset * 1000);\n};\nconst formatTwoDigitNumber = num => {\n  return num < 10 ? `0${num}` : num;\n};\nexport const getTimeString = date => {\n  const hr = date.getHours() > 12 ? date.getHours() % 12 : date.getHours();\n  const mn = date.getMinutes();\n  const pr = date.getHours() < 12 ? \"AM\" : \"PM\";\n  return `${formatTwoDigitNumber(hr)}:${formatTwoDigitNumber(mn)} ${pr}`;\n};\n","import { keyframes } from \"styled-components\";\n\nexport const animations = {\n  fadeIn: keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`,\n  fadeOut: keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`,\n  bounceIn: keyframes`\n  from {\n    opacity: 0;\n    transform: translate(-50%, -6rem);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n`,\n  bounceOut: keyframes`\nfrom {\n  opacity: 1;\n  transform: translate(-50%, -50%);\n}\nto {\n  opacity: 0;\n  transform: translate(-50%, -6rem);\n}\n`,\n};\n","import { getCurUTCDate } from \"../utils\";\nexport const GET_UTC_TIME = \"TIME/GET_UTC_TIME\";\nexport const UPDATE_UTC_TIME = \"TIME/SET_CUR_UTC_TIME\";\n\nexport const updateUTCTime = () => ({\n  type: UPDATE_UTC_TIME,\n});\n\nconst initialState = getCurUTCDate();\n\nexport default function date(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_UTC_TIME:\n      return new Date(state.getTime() + 1000);\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport favorites from \"./favorites\";\nimport search from \"./search\";\nimport degree from \"./degree\";\nimport date from \"./date\";\nexport * from \"./favorites\";\nexport * from \"./search\";\nexport * from \"./degree\";\nexport * from \"./date\";\nexport default combineReducers({ favorites, search, degree, date });\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Background = props => {\n  const { className } = props;\n  return <div className={className}></div>;\n};\n\nexport default styled(Background)`\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  z-index: -1;\n  background: url(${props => props.image}) no-repeat center center;\n  background-size: cover;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleDegree, CELSIUS, FAHRENHEIT } from \"../reducers\";\n\nconst Navbar = props => {\n  const { className } = props;\n  const degree = useSelector(state => state.degree);\n  const dispatch = useDispatch();\n  const onClick = e => {\n    if (degree !== e.target.dataset.degree) dispatch(toggleDegree());\n  };\n  const renderDegrees = () => {\n    return (\n      <div className=\"degree-container\">\n        <span\n          className={`degree ${degree === CELSIUS && \"degree-selected\"}`}\n          onClick={onClick}\n          data-degree={CELSIUS}\n        >\n          &#176;C\n        </span>\n        <span>/</span>\n        <span\n          className={`degree ${degree === FAHRENHEIT && \"degree-selected\"}`}\n          onClick={onClick}\n          data-degree={FAHRENHEIT}\n        >\n          &#176;F\n        </span>\n      </div>\n    );\n  };\n  return (\n    <nav className={className}>\n      <Logo>W/N</Logo>\n      {renderDegrees()}\n    </nav>\n  );\n};\n\nconst Logo = styled.h2`\n  font-size: 1em;\n`;\n\nexport default styled(Navbar)`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  user-select: none;\n  * {\n    font-family: \"Josefin Sans\", sans-serif;\n  }\n  .degree-container {\n    .degree {\n      color: rgba(150, 150, 150);\n      &:hover {\n        cursor: pointer;\n      }\n    }\n    .degree-selected {\n      color: black;\n      &:hover {\n        cursor: default;\n      }\n    }\n  }\n`;\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { MdSearch } from \"react-icons/md\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setKeyword } from \"../reducers\";\n\nconst SearchBar = props => {\n  const { className, getSuggestions, suggestions, onSuggestionClick } = props;\n  const keyword = useSelector(state => state.search);\n  const searchInput = useRef();\n  const dispatch = useDispatch();\n  const onChange = e => {\n    dispatch(setKeyword(e.target.value));\n    getSuggestions(e.target.value);\n  };\n  const onClick = e => {\n    dispatch(setKeyword(\"\"));\n    onSuggestionClick(e);\n  };\n  return (\n    <div className={className}>\n      <div className=\"search-container\">\n        <form className=\"search-form\" onSubmit={e => e.preventDefault()}>\n          <MdSearch className=\"search-icon\" />\n          <SearchInput\n            type=\"text\"\n            placeholder=\"Search...\"\n            onChange={onChange}\n            ref={searchInput}\n            value={keyword}\n          />\n        </form>\n      </div>\n      <Suggestions className=\"suggestions\">\n        {suggestions.map((suggestion, index) => (\n          <li\n            className=\"suggestion\"\n            key={suggestion.id}\n            onClick={onClick}\n            data-index={index}\n          >\n            {suggestion.place_name}\n          </li>\n        ))}\n      </Suggestions>\n    </div>\n  );\n};\n\nconst SearchInput = styled.input`\n  background-color: transparent;\n  border: none;\n  color: white;\n  padding: 0 0.5rem;\n  font-size: 1em;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Suggestions = styled.ul`\n  list-style: none;\n  width: 100%;\n`;\n\nexport default styled(SearchBar)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  border: thin rgba(255, 255, 255, 0.7) solid;\n  background-color: rgba(70, 70, 70, 1);\n  border-radius: 0.5rem;\n  overflow: hidden;\n  .search-container {\n    display: flex;\n    align-items: center;\n    padding: 0.5rem;\n    .search-form {\n      flex: 1;\n      display: flex;\n      align-items: center;\n      .search-icon {\n        width: 1.5rem;\n        height: 1.5rem;\n        font-size: 1.5em;\n        color: white;\n        margin-right: 0.125rem;\n        margin-bottom: 0;\n      }\n      input {\n        flex: 1;\n      }\n    }\n  }\n  .suggestions {\n    color: white;\n    user-select: none;\n    li {\n      padding: 0.5rem 1rem;\n      &:hover {\n        background-color: rgba(120, 120, 120, 1);\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  getIcon,\n  getWeatherColor,\n  getUTCDateWithOffset,\n  convertTemp,\n  getTimeString,\n} from \"../utils\";\nimport { MdFavoriteBorder, MdClear } from \"react-icons/md\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  addToFavorites,\n  removeFromFavorites,\n  setKeyword,\n  CELSIUS,\n} from \"../reducers\";\n\nconst WeatherCard = props => {\n  const { className, weather, onFavoriteClick } = props;\n  const {\n    city,\n    lat,\n    lon,\n    timezone_offset,\n    temp,\n    temp_min,\n    temp_max,\n    description,\n    icon,\n    isFavorite,\n  } = weather;\n  const date = useSelector(state => state.date);\n  const degree = useSelector(state => state.degree);\n  const timeString = getTimeString(getUTCDateWithOffset(date, timezone_offset));\n  const dispatch = useDispatch();\n  const onClick = () => {\n    if (isFavorite) {\n      dispatch(removeFromFavorites(weather));\n    } else {\n      dispatch(addToFavorites(weather));\n      onFavoriteClick();\n      dispatch(setKeyword(\"\"));\n    }\n  };\n  const getDegree = tempInCelsius =>\n    convertTemp(degree, tempInCelsius) + (degree === CELSIUS ? \"℃\" : \"℉\");\n  return (\n    <div className={className}>\n      <div className=\"top-container\">\n        <div className=\"city-icon-container\">\n          <Title>{city}</Title>\n          {getIcon(icon)}\n        </div>\n        <span className=\"date-text\">{timeString}</span>\n      </div>\n      <div className=\"mid-container\">\n        <span className=\"cur-temp\">{getDegree(temp)}</span>\n        <div className=\"max-min-temp-container\">\n          <span>{getDegree(temp_max)}</span>\n          <span>{getDegree(temp_min)}</span>\n        </div>\n      </div>\n      <div className=\"btm-container\">\n        <span className=\"description\">{description}</span>\n      </div>\n      <div\n        className=\"favorite-icon-container\"\n        onClick={onClick}\n        data-lat={lat}\n        data-lon={lon}\n      >\n        {weather.isFavorite ? (\n          <MdClear className=\"favorite-icon\" />\n        ) : (\n          <MdFavoriteBorder className=\"favorite-icon\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst Title = styled.div`\n  font-size: 1.3em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-right: 0.5rem;\n`;\nexport default styled(WeatherCard)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  overflow: hidden;\n  user-select: none;\n  width: 100%;\n  min-width: 13rem;\n  margin: 0.5rem;\n  height: 15rem;\n  color: ${props => getWeatherColor(props.weather.temp).text};\n  border-radius: 0.75rem;\n  border: 8px solid ${props => getWeatherColor(props.weather.temp).bg};\n  background-color: white;\n  .top-container {\n    display: flex;\n    flex-direction: column;\n    border-top-left-radius: 0.5rem;\n    border-top-right-radius: 0.5rem;\n    overflow: hidden;\n    .city-icon-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      height: 3rem;\n      padding: 0.5rem 1rem;\n      .weather-icon {\n        min-width: 2.5rem;\n        min-height: 2.5rem;\n      }\n    }\n    .date-text {\n      margin-left: 1.5rem;\n    }\n  }\n  .mid-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0.5rem 1rem;\n    .cur-temp {\n      flex: 1;\n      font-size: 1.6em;\n      margin-left: 0.5rem;\n    }\n    .max-min-temp-container {\n      width: 30%;\n      display: flex;\n      flex-direction: column;\n      text-align: center;\n      span:first-child {\n        border-bottom: 1px solid\n          ${props => getWeatherColor(props.weather.temp).text};\n        padding-bottom: 0.25rem;\n        margin-bottom: 0.25rem;\n      }\n    }\n  }\n  .btm-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 0.5rem;\n    border-bottom-left-radius: 0.5rem;\n    border-bottom-right-radius: 0.5rem;\n    overflow: hidden;\n    .description {\n      font-size: 1.2em;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n  }\n  .favorite-icon-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n    color: #38619d;\n    padding: 0.5rem;\n    transition: all 100ms ease-in-out;\n    .favorite-icon {\n      font-size: 1.5em;\n      color: #fa826b;\n    }\n    &:hover {\n      background-color: #f0f0f0;\n      cursor: pointer;\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  WiDaySunny,\n  WiDayCloudy,\n  WiCloud,\n  WiCloudy,\n  WiRain,\n  WiDayRain,\n  WiThunderstorm,\n  WiSnow,\n  WiFog,\n  WiNightClear,\n  WiNightCloudy,\n  WiNightRain,\n} from \"react-icons/wi\";\n\nexport const getIcon = code => {\n  const iconCode = {\n    \"01d\": <WiDaySunny className=\"weather-icon\" />,\n    \"02d\": <WiDayCloudy className=\"weather-icon\" />,\n    \"03d\": <WiCloud className=\"weather-icon\" />,\n    \"04d\": <WiCloudy className=\"weather-icon\" />,\n    \"09d\": <WiRain className=\"weather-icon\" />,\n    \"10d\": <WiDayRain className=\"weather-icon\" />,\n    \"11d\": <WiThunderstorm className=\"weather-icon\" />,\n    \"13d\": <WiSnow className=\"weather-icon\" />,\n    \"50d\": <WiFog className=\"weather-icon\" />,\n    \"01n\": <WiNightClear className=\"weather-icon\" />,\n    \"02n\": <WiNightCloudy className=\"weather-icon\" />,\n    \"03n\": <WiCloud className=\"weather-icon\" />,\n    \"04n\": <WiCloudy className=\"weather-icon\" />,\n    \"09n\": <WiRain className=\"weather-icon\" />,\n    \"10n\": <WiNightRain className=\"weather-icon\" />,\n    \"11n\": <WiThunderstorm className=\"weather-icon\" />,\n    \"13n\": <WiSnow className=\"weather-icon\" />,\n    \"50n\": <WiFog className=\"weather-icon\" />,\n  };\n  return iconCode[code];\n};\n","import axios from \"axios\";\n\nexport const getWeather = ({ lat, lon }) => {\n  const url = \"https://weather-or-not-server.herokuapp.com/weather\";\n  const config = {\n    params: {\n      lat,\n      lon,\n    },\n  };\n  return axios.get(url, config);\n};\n","import axios from \"axios\";\n\nexport const getPlaces = city => {\n  const url = `https://weather-or-not-server.herokuapp.com/geocode/${city}`;\n  return axios.get(url);\n};\n","require(\"dotenv\").config();\nexport * from \"./weather\";\nexport * from \"./geocode\";\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport isEmpty from \"is-empty\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { SearchBar, WeatherCard } from \"../components\";\nimport { getWeather, getPlaces } from \"../api\";\nimport { roundTemp, animations } from \"../utils\";\n\nconst Search = props => {\n  const { className } = props;\n  const [suggestions, setSuggestions] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const getSuggestions = async keyword => {\n    if (!isEmpty(keyword)) {\n      try {\n        const res = await getPlaces(keyword);\n        let places = [];\n        res.data.features.map(place => places.push(place));\n        setSuggestions(places);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n  const onSuggestionClick = e => {\n    const index = e.target.dataset.index;\n    const [lon, lat] = suggestions[index].geometry.coordinates;\n    setSuggestions([]);\n    onGetWeather(e.target.innerText, { lon, lat });\n  };\n  const onGetWeather = async (city, coordinates) => {\n    try {\n      setWeatherData(null);\n      setLoading(true);\n      const res = await getWeather(coordinates);\n      onSetWeatherData(city, res.data);\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n  const onSetWeatherData = (city, data) => {\n    setWeatherData({\n      city: city.split(\",\")[0],\n      lat: data.lat,\n      lon: data.lon,\n      timezone_offset: data.timezone_offset,\n      temp: roundTemp(data.current.temp),\n      temp_min: roundTemp(data.daily[0].temp.min),\n      temp_max: roundTemp(data.daily[0].temp.max),\n      description: data.current.weather[0].description,\n      icon: data.current.weather[0].icon,\n      isFavorite: false,\n    });\n  };\n  const onFavoriteClick = () => {\n    setWeatherData(null);\n  };\n  const renderLoading = () => <ClipLoader size={30} color=\"white\" />;\n  const renderWeatherCard = () =>\n    weatherData ? (\n      <WeatherCard weather={weatherData} onFavoriteClick={onFavoriteClick} />\n    ) : (\n      <span className=\"greeting-msg\">\n        Check the weather and we'll keep you updated.\n      </span>\n    );\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", e => {\n      if (!e.target.classList.contains(\"suggestion\") && !isEmpty(suggestions))\n        setSuggestions([]);\n    });\n  });\n  return (\n    <div className={className}>\n      <div className=\"search-top-container\">\n        <SearchBar\n          className=\"search-bar\"\n          getSuggestions={getSuggestions}\n          suggestions={suggestions}\n          onSuggestionClick={onSuggestionClick}\n        />\n      </div>\n      <div className=\"search-result\">\n        {loading ? renderLoading() : renderWeatherCard()}\n      </div>\n    </div>\n  );\n};\n\nexport default styled(Search)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 2rem;\n  .search-top-container {\n    position: absolute;\n    z-index: 2;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n  .search-result {\n    width: 100%;\n    height: 20rem;\n    margin-top: 3rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    .greeting-msg {\n      font-size: 2.5em;\n      animation: ${animations.fadeIn} 2s forwards;\n      @media (max-width: 640px) {\n        font-size: 2em;\n      }\n    }\n  }\n  .search-bar {\n    width: 70%;\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport isEmpty from \"is-empty\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WeatherCard } from \"../components\";\nimport { removeFromFavorites, updateFavorite } from \"../reducers\";\nimport { getWeather } from \"../api\";\nimport { roundTemp } from \"../utils\";\nconst Favorites = props => {\n  const { className } = props;\n  const favorites = useSelector(state => state.favorites);\n  const dispatch = useDispatch();\n  const onDelete = e => {\n    const { lat, lon } = e.target.dataset;\n    dispatch(removeFromFavorites({ lat, lon }));\n  };\n  const renderEmptyMessage = () => (\n    <h2 className=\"empty-msg\">\n      Please add your favorite city to check the weather.\n    </h2>\n  );\n  const renderFavorites = () => (\n    <div className=\"weather-card-container\">\n      {favorites.map(favorite => (\n        <WeatherCard\n          key={`${favorite.lat}.${favorite.lon}`}\n          className=\"weather-card\"\n          weather={favorite}\n          onFavoriteClick={onDelete}\n        />\n      ))}\n    </div>\n  );\n  const updateFavorites = () => {\n    favorites.map(async favorite => {\n      const coordinates = { lat: favorite.lat, lon: favorite.lon };\n      try {\n        const res = await getWeather(coordinates);\n        dispatch(\n          updateFavorite({\n            ...favorite,\n            temp: roundTemp(res.data.current.temp),\n            temp_min: roundTemp(res.data.daily[0].temp.min),\n            temp_max: roundTemp(res.data.daily[0].temp.max),\n            description: res.data.current.weather[0].description,\n            icon: res.data.current.weather[0].icon,\n          })\n        );\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateFavorites();\n    }, 1200000);\n    return () => clearInterval(interval);\n  });\n  return (\n    <div className={className}>\n      <h1>Favorites</h1>\n      {isEmpty(favorites) ? renderEmptyMessage() : renderFavorites()}\n    </div>\n  );\n};\n\nexport default styled(Favorites)`\n  min-height: 15rem;\n  /* background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(10px); */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  .empty-msg {\n    color: gray;\n    margin: 1rem 0 0 1rem;\n  }\n  .weather-card-container {\n    flex: 1;\n    display: flex;\n    flex-direction: row-reverse;\n    align-items: center;\n    justify-content: flex-start;\n    flex-flow: row wrap;\n    height: 15rem;\n    max-height: 26rem;\n    padding: 1rem;\n    margin-top: 1rem;\n    overflow: auto;\n    background-color: #f5f5f9;\n    border-radius: 1rem;\n    .weather-card {\n      flex: calc(50% - 1rem);\n      max-width: calc(50% - 1rem);\n      @media (max-width: 640px) {\n        flex: 1;\n        max-width: 100%;\n      }\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Open Sans', sans-serif;\n  }\n  .blur {\n    filter: blur(0.125rem);\n    -webkit-filter: blur(0.125rem);\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateUTCTime } from \"./reducers\";\nimport \"./css/App.css\";\nimport { Navbar } from \"./components\";\nimport { Favorites, Search } from \"./containers\";\nimport { GlobalStyle } from \"./global\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(updateUTCTime());\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Navbar />\n      <Search />\n      <Favorites />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers, { CELSIUS } from \"./reducers\";\n\nconst initState = () => {\n  let favorites = localStorage.getItem(\"weather-or-not/favorites\");\n  let degree = localStorage.getItem(\"weather-or-not/degree\");\n  if (!favorites) {\n    //if there are no favorite items, create new item\n    favorites = [];\n    localStorage.setItem(\"weather-or-not/favorites\", JSON.stringify(favorites));\n  }\n  if (!degree) {\n    degree = CELSIUS;\n    localStorage.setItem(\"weather-or-not/degree\", degree);\n  }\n  return { favorites: JSON.parse(favorites), degree };\n};\n//check weather once in a while, 시간, 온도\nconst store = createStore(reducers, initState(), composeWithDevTools());\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}